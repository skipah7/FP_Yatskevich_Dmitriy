{
  "root": true,
  "plugins": ["@typescript-eslint", "import", "rxjs", "prettier"],
  "settings": {
    "import/parser": {
      "@typescript-eslint/parser": [".ts", ".tsx"]
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true,
        "project": "./tsconfig.json"
      }
    }
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:import/typescript"
      ],
      "parserOptions": {
        "project": ["./tsconfig.json"]
      },
      "rules": {
        "prettier/prettier": "warn",
        "import/no-self-import": ["error"],
        "import/no-mutable-exports": ["error"],
        "import/order": [
          "warn",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              ["parent", "sibling"],
              "index",
              "object",
              "type"
            ],
            "pathGroups": [
              { "pattern": "@angular/**", "group": "builtin" },
              { "pattern": "@ngrx/**", "group": "builtin" },
              { "pattern": "rxjs/**", "group": "builtin" },
              { "pattern": "rxjs", "group": "builtin" },
              {
                "pattern": "@+(ui-shared|common)/**",
                "group": "internal",
                "position": "before"
              },
              {
                "pattern": "@shared/**",
                "group": "internal",
                "position": "after"
              }
            ],
            "newlines-between": "always",
            "alphabetize": {
              "order": "asc",
              "caseInsensitive": true
            },
            "pathGroupsExcludedImportTypes": []
          }
        ],
        "curly": ["error", "multi-line"],
        "no-useless-escape": "off",
        "no-var": "error",
        "quote-props": ["error", "as-needed"],
        "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],
        "no-restricted-imports": ["error", "rxjs/Rx", "lodash"],
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/consistent-indexed-object-style": [
          "error",
          "record"
        ],
        "@typescript-eslint/consistent-type-definitions": "off",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            },
            "multilineDetection": "brackets"
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "default",
            "format": ["camelCase"]
          },
          {
            "selector": "variable",
            "format": null
          },
          // {
          //     "selector": "variable",
          //     "types": ["boolean"],
          //     "format": ["PascalCase"],
          //     "prefix": ["is", "should", "has", "can", "did", "will"]
          // },
          {
            "selector": "parameter",
            "format": ["camelCase"],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "enumMember",
            "format": ["UPPER_CASE"]
          },
          {
            "selector": "classProperty",
            "modifiers": ["private"],
            "format": ["camelCase"],
            "leadingUnderscore": "require"
          },
          {
            "selector": "typeLike",
            "format": null
          },
          {
            "selector": "typeProperty",
            "format": null
          }
        ],
        "@typescript-eslint/no-confusing-non-null-assertion": ["error"],
        "@typescript-eslint/no-empty-interface": [
          "error",
          {
            "allowSingleExtends": false
          }
        ],
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
          "error",
          {
            "allowComparingNullableBooleansToTrue": true,
            "allowComparingNullableBooleansToFalse": true
          }
        ],
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        //"@typescript-eslint/no-unnecessary-condition": "warn",
        "@typescript-eslint/no-unsafe-return": "warn",
        "@typescript-eslint/no-explicit-any": [
          "warn",
          { "ignoreRestArgs": true }
        ],
        //"@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-includes": "warn",
        "@typescript-eslint/prefer-nullish-coalescing": "warn",
        "@typescript-eslint/prefer-optional-chain": "warn",
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/no-var-requires": "error",
        "brace-style": "off",
        "func-call-spacing": "off",
        "@typescript-eslint/func-call-spacing": ["error", "never"],
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "off",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": [
          "error",
          {
            "allow": [
              "decoratedFunctions",
              "protected-constructors",
              "private-constructors"
            ]
          }
        ],
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": "off",
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": ["error"],
        "no-redeclare": "off",
        "@typescript-eslint/no-redeclare": ["error"],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": ["error"],
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error"],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": ["error"],
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "error",
          "single",
          { "allowTemplateLiterals": true, "avoidEscape": true }
        ],
        "rxjs/no-async-subscribe": "error",
        "rxjs/no-ignored-observable": "warn",
        "rxjs/no-compat": "error",
        "rxjs/no-connectable": "error",
        "rxjs/no-create": "error",
        "rxjs/no-ignored-notifier": "error",
        "rxjs/no-ignored-replay-buffer": "error",
        "rxjs/no-internal": "error",
        "rxjs/no-nested-subscribe": "warn",
        "rxjs/no-subject-unsubscribe": "error",
        "rxjs/no-unbound-methods": "error",
        "rxjs/no-unsafe-catch": "error",
        "rxjs/no-unsafe-first": "error",
        "rxjs/no-unsafe-switchmap": "error",
        "rxjs/no-unsafe-takeuntil": "error"
      }
    },
    {
      "files": ["*.js", "*.jsx"],
      "extends": ["eslint:recommended"],
      "parserOptions": {
        "sourceType": "module",
        "ecmaVersion": 2020
      },
      "rules": {}
    },
    {
      "files": ["*.ts"],
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": ["app", "us"],
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/contextual-decorator": ["error"],
        "@angular-eslint/contextual-lifecycle": ["error"],
        "@angular-eslint/no-attribute-decorator": ["error"],
        "@angular-eslint/no-conflicting-lifecycle": ["error"],
        "@angular-eslint/no-empty-lifecycle-method": ["error"],
        "@angular-eslint/no-forward-ref": ["error"],
        "@angular-eslint/no-host-metadata-property": ["error"],
        "@angular-eslint/no-lifecycle-call": ["error"],
        "@angular-eslint/no-queries-metadata-property": ["error"],
        "@angular-eslint/use-lifecycle-interface": ["error"],
        "@angular-eslint/use-pipe-transform-interface": ["error"]
      }
    },
    {
      "files": ["*.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "prettier/prettier": "warn",
        "@angular-eslint/template/accessibility-elements-content": ["error"],
        "@angular-eslint/template/banana-in-box": ["error"],
        "@angular-eslint/template/no-any": ["error"],
        "@angular-eslint/template/no-call-expression": ["warn"],
        "@angular-eslint/template/no-negated-async": ["error"]
      }
    }
    // {
    //     "files": ["*.ts"],
    //     "extends": ["plugin:@ngrx/recommended-requiring-type-checking"]
    // }
  ]
}
